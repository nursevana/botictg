import os
import logging
from random import choices, randint, choice
from collections import defaultdict
from dotenv import load_dotenv
from telebot import TeleBot, types
from sqlalchemy import create_engine, Column, Integer, String, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('7638805645:AAGVHS0Yr1yxn34LTtZ14tTL8R0ADHZmR9I')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine('sqlite:///english_bot.db')
Session = sessionmaker(bind=engine)
session = Session()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    tablename = 'users'
    id = Column(Integer, primary_key=True)
    chat_id = Column(Integer, unique=True)
    test_count = Column(Integer, default=0)
    exercise_history = Column(JSON, default=[])

class ExerciseResult(Base):
    tablename = 'exercise_results'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    rule = Column(String)
    question = Column(String)
    is_correct = Column(Integer)

Base.metadata.create_all(engine)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7638805645:AAGVHS0Yr1yxn34LTtZ14tTL8R0ADHZmR9I')

# –°–ª–æ–≤–∞—Ä—å —Å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
grammar_rules = {
    "Present Simple": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö, —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤.\n–ü—Ä–∏–º–µ—Ä: He plays tennis every Sunday.",
    "Past Simple": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–æ—à–ª–æ–º.\n–ü—Ä–∏–º–µ—Ä: I bought a car yesterday.",
    "Future Simple": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç –≤ –±—É–¥—É—â–µ–º.\n–ü—Ä–∏–º–µ—Ä: She will visit her parents next week."
}

# –°–ª–æ–≤–∞—Ä—å —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
exercises = {
    "Present Simple": [
        {"question": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: He/play/tennis", "answer": "He plays tennis."},
        {"question": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: She (is/are) happy", "answer": "is"},
        {"question": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: We/like/coffee", "answer": "We don't like coffee."}
    ],
    "Past Simple": [
        {"question": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: I/buy/a car", "answer": "I bought a car."},
        {"question": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: They (was/were) tired", "answer": "were"},
        {"question": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å: you/see/that movie", "answer": "Did you see that movie?"}
    ],
    "Future Simple": [
        {"question": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: I/travel/to Paris", "answer": "I will travel to Paris."},
        {"question": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: They (will/would) come tomorrow", "answer": "will"},
        {"question": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: She/call/you", "answer": "She won't call you."}
    ]
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_exercises = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏")
    btn2 = types.KeyboardButton("üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
    btn3 = types.KeyboardButton("üèÜ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è")
    btn4 = types.KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n"
                         "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "üìã –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏":
        show_grammar_rules(message)
    elif message.text == "üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        send_exercise(message)
    elif message.text == "üèÜ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è":
        test_knowledge(message)
    elif message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        about_project(message)
    else:
        check_answer(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
def show_grammar_rules(message):
    markup = types.InlineKeyboardMarkup()
    for rule in grammar_rules:
        btn = types.InlineKeyboardButton(text=rule, callback_data=rule)
        markup.add(btn)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data in grammar_rules:
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, f"{call.data}:\n{grammar_rules[call.data]}")

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
def send_exercise(message):
    rule = choice(list(exercises.keys()))
    exercise = choice(exercises[rule])
    
    user_exercises[message.chat.id] = {
        "rule": rule,
        "question": exercise["question"],
        "correct_answer": exercise["answer"]
    }
    
    bot.send_message(message.chat.id, f"–í—ã–ø–æ–ª–Ω–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ({rule}):\n\n{exercise['question']}\n\n"
                                    "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ.")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_answer(message):
    if message.chat.id in user_exercises:
        user_answer = message.text.strip().lower()
        correct_answer = user_exercises[message.chat.id]["correct_answer"].lower()
        
        if user_answer.endswith('.'):
            user_answer = user_answer[:-1]
        if correct_answer.endswith('.'):
            correct_answer = correct_answer[:-1]
            
        if user_answer == correct_answer:
            bot.reply_to(message, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
        else:
            bot.reply_to(message, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {user_exercises[message.chat.id]['correct_answer']}")
        
        del user_exercises[message.chat.id]

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ user_exercises)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
user_test_counts = defaultdict(int)


# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (0.2% –Ω–∞ —Å–ø–µ—Ü—á–∏—Å–ª–æ, 99.2% –Ω–∞ –æ–±—ã—á–Ω—ã–µ)
INIT_SPECIAL_PROB = 0.002  # 0.2% –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–ø–µ—Ü—á–∏—Å–ª–æ
INIT_NORMAL_PROB = 0.992    # 99.2% –Ω–∞ –æ–±—ã—á–Ω—ã–µ
MAX_SPECIAL_PROB = 0.005    # –ú–∞–∫—Å–∏–º—É–º 0.5% –Ω–∞ —Å–ø–µ—Ü—á–∏—Å–ª–æ (5% –≤—Å–µ–≥–æ)
BOOST_STEP = 0.0001         # +0.01% –∑–∞ –∫–∞–∂–¥—ã–µ 3 –Ω–∞–∂–∞—Ç–∏—è

def test_knowledge(message):
    user_id = message.chat.id
    user_test_counts[user_id] += 1
    
    # –†–∞—Å—Å—á–µ—Ç –±—É—Å—Ç–∞ (–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç)
    boost = BOOST_STEP * (user_test_counts[user_id] // 3)
    
    # –¢–µ–∫—É—â–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    current_special_prob = min(INIT_SPECIAL_PROB + boost, MAX_SPECIAL_PROB)
    current_normal_prob = max (0.90,  # –ú–∏–Ω–∏–º—É–º 90% –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∏—Å–µ–ª
        INIT_NORMAL_PROB - (boost * len(special_numbers)))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    probs = [current_special_prob] * len(special_numbers) + [current_normal_prob]
    outcomes = list(special_numbers.keys()) + ["normal"]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = choices(outcomes, weights=probs, k=1)[0]
    
    if result in special_numbers:
        bot.send_message(message.chat.id, special_numbers[result])
    else:
        score = randint(0, 10000)
        if score < 3000:
            msg = f"üéâ {score}/10000. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"
        elif score < 7000:
            msg = f"üéâ {score}/10000. –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        else:
            msg = f"üéâ {score}/10000. –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
        bot.send_message(message.chat.id, msg)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
def about_project(message):
    project_info = """
‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "–ü–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤–µ–¥–µ–Ω–∏–µ" –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–∞—Ñ–ª–µ—Ç—ã.

–ë–æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
- –û–ø–∏—Å–∞–Ω–∏–µ 3 –≤—Ä–µ–º–µ–Ω: Present Simple, Past Simple, Future Simple
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –≤—Ä–µ–º–µ–Ω
- –ü—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
"""
    bot.send_message(message.chat.id, project_info, parse_mode='HTML')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
